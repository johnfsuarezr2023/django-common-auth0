# Generated by Django 3.2.20 on 2023-08-16 13:21

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import embed_video.fields
import lj_common_shared_service.utils.file
import lj_common_shared_service.utils.mixins
import uuid

REPORT_OUTPUT = 'Report output'
DATE_CREATED = 'Date created'
DATE_MODIFIED = 'Date modified'
CORE_APPLICATION_CLASS = 'core.ljapplication'
PREVIEW_PHOTO = 'Preview phot'

class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_ljcategoricalvalue_ljcategoricalvariable'), ('core', '0003_update_pk_id_sequence'), ('core', '0004_ljphotoreportimage_is_image'), ('core', '0005_auto_20221207_1950'), ('core', '0006_auto_20230220_1842'), ('core', '0007_delete_ljphoto'), ('core', '0008_alter_ljphotoreport_output'), ('core', '0009_auto_20230703_1643')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LJApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('version', models.IntegerField(blank=True, default=None, null=True, verbose_name='Version')),
                ('photo', models.ImageField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name=PREVIEW_PHOTO)),
                ('access_right', models.CharField(choices=[('0', 'Public'), ('1', 'Private'), ('2', 'Organization')], default='0', max_length=255, verbose_name='Access right')),
                ('status', models.CharField(choices=[('0', 'Draft'), ('1', 'Published')], default='0', max_length=255, verbose_name='Status')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name=DATE_CREATED)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date updated')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='Favorite')),
                ('is_promoted', models.BooleanField(default=False, verbose_name='Promoted')),
                ('is_reviewed', models.BooleanField(default=False, verbose_name='Reviewed by LJ team')),
                ('is_sample', models.BooleanField(default=False, verbose_name='Sample application')),
                ('success_message', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Success message')),
                ('failure_message', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Failure message')),
                ('instruction_message', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Instruction message')),
                ('description', models.CharField(blank=True, default=None, max_length=1024, null=True, verbose_name='Description')),
                ('parameter_settings', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('video', embed_video.fields.EmbedVideoField(blank=True, default=None, null=True, verbose_name='Video preview')),
                ('webhook_url', models.URLField(blank=True, default=None, null=True, verbose_name='Webhook URL')),
            ],
            options={
                'verbose_name': 'Application',
                'verbose_name_plural': 'Applications',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.CreateModel(
            name='LJApplicationTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_tag', to=CORE_APPLICATION_CLASS)),
            ],
            options={
                'verbose_name': 'Application tag',
                'verbose_name_plural': 'Application tags',
            },
        ),
        migrations.CreateModel(
            name='LJCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('photo', models.ImageField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name=PREVIEW_PHOTO)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='LJDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('is_published', models.BooleanField(default=False, verbose_name='Published')),
                ('photo', models.ImageField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name=PREVIEW_PHOTO)),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.CreateModel(
            name='LJGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Goal',
                'verbose_name_plural': 'Goals',
            },
        ),
        migrations.CreateModel(
            name='LJOntology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Name')),
                ('version', models.IntegerField(blank=True, default=None, null=True, verbose_name='Version')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'verbose_name': 'Ontology',
                'verbose_name_plural': 'Ontologies',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.CreateModel(
            name='LJPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, default=None, max_length=255, verbose_name='Label')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name=DATE_CREATED)),
                ('photo', models.ImageField(default=None, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name='Image photo')),
                ('minX', models.FloatField(default=0.0, verbose_name='Min X')),
                ('minY', models.FloatField(default=0.0, verbose_name='Min Y')),
                ('maxX', models.FloatField(default=0.0, verbose_name='Max X')),
                ('maxY', models.FloatField(default=0.0, verbose_name='Max Y')),
            ],
            options={
                'verbose_name': 'Photo',
                'verbose_name_plural': 'Photos',
            },
        ),
        migrations.CreateModel(
            name='LJPhotoReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name=DATE_CREATED)),
                ('device_type', models.CharField(choices=[('0', 'elp'), ('1', 'iphonex')], default='0', max_length=255, verbose_name='Device type')),
                ('is_result_correct', models.BooleanField(blank=True, null=True, verbose_name='The user verified the result is correct')),
                ('status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Report status')),
                ('message', models.CharField(blank=True, default=None, max_length=2048, null=True, verbose_name='Report message')),
                ('output', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True, verbose_name=REPORT_OUTPUT)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('camera_angle_to_surface', models.FloatField(default=0.0, verbose_name='Camera angle to surface')),
                ('camera_distance_to_surface', models.FloatField(default=0.0, verbose_name='Camera distance to surface')),
                ('application', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_report', to=CORE_APPLICATION_CLASS)),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_report', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Photo Report',
                'verbose_name_plural': 'Photo Reports',
            },
        ),
        migrations.CreateModel(
            name='LJPhotoReportDetectionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(db_index=True, max_length=255, verbose_name='Host')),
                ('name', models.CharField(max_length=255, verbose_name='Model name')),
                ('port', models.PositiveIntegerField(default=0, verbose_name='Port')),
                ('version', models.PositiveIntegerField(default=0, verbose_name='Version')),
                ('type', models.CharField(db_index=True, max_length=255, verbose_name='Model type')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detection_model_photo_report', to='core.ljphotoreport')),
            ],
            options={
                'verbose_name': 'Report detection model',
                'verbose_name_plural': 'Report detection models',
            },
        ),
        migrations.CreateModel(
            name='LJPhotoReportImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name='File')),
                ('url', models.URLField(blank=True, default=None, null=True, verbose_name='Reference file URL')),
                ('video_id', models.CharField(blank=True, default=None, max_length=1024, null=True, verbose_name='The video ID from the different service')),
                ('is_annotated', models.BooleanField(default=False, verbose_name='Annotated file image')),
                ('photo_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_report_image', to='core.ljphotoreport', verbose_name='Photo report')),
            ],
            options={
                'verbose_name': 'Photo report image',
                'verbose_name_plural': 'Photo report images',
            },
        ),
        migrations.CreateModel(
            name='LJPhotoReportImageObjectBbox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left', models.IntegerField(default=0, verbose_name='Left coordinate')),
                ('top', models.IntegerField(default=0, verbose_name='Top coordinate')),
                ('right', models.IntegerField(default=0, verbose_name='Right coordinate')),
                ('bottom', models.IntegerField(default=0, verbose_name='Bottom coordinate')),
            ],
        ),
        migrations.CreateModel(
            name='LJTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name='Template icon')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_template', to=settings.AUTH_USER_MODEL, verbose_name='Template owner')),
            ],
            options={
                'verbose_name': 'Template',
                'verbose_name_plural': 'Templates',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.CreateModel(
            name='LJUserDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('0', 'elp'), ('1', 'iphonex')], default='0', max_length=5, verbose_name='Device type')),
                ('uid', models.CharField(max_length=255, verbose_name='Device ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Device name')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_device', to=settings.AUTH_USER_MODEL, verbose_name='Device owner')),
            ],
            options={
                'verbose_name': 'User device',
                'verbose_name_plural': 'User devices',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.CreateModel(
            name='LJVideoReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name=DATE_CREATED)),
                ('video', models.FileField(blank=True, default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name='Video')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('application', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='application_video_report', to=CORE_APPLICATION_CLASS)),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_video_report', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Video report',
                'verbose_name_plural': 'Video reports',
            },
        ),
        migrations.CreateModel(
            name='LJVideoFrame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Report status')),
                ('message', models.CharField(blank=True, default=None, max_length=2048, null=True, verbose_name='Report message')),
                ('output', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True, verbose_name=REPORT_OUTPUT)),
                ('time', models.FloatField(default=0.0, help_text='Time in seconds', verbose_name='Frame time')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_frame', to='core.ljvideoreport')),
            ],
            options={
                'verbose_name': 'Video frame',
                'verbose_name_plural': 'Video frames',
            },
        ),
        migrations.CreateModel(
            name='LJPhotoReportImageObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Material name')),
                ('shape', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Shape name')),
                ('color', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Color name')),
                ('class_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Class name')),
                ('class_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Class id')),
                ('instance_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Instance id')),
                ('bbox', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ljphotoreportimageobjectbbox')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_report_object_image', to='core.ljphotoreportimage', verbose_name='Photo report image')),
            ],
        ),
        migrations.CreateModel(
            name='LJDomainAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('clause', models.CharField(max_length=255, verbose_name='Clause')),
                ('call_on_output', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), default=list, null=True, size=None, verbose_name='Call methods on output')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public')),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('constraints', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_domain', to='core.ljdomain')),
                ('template', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_template', to='core.ljtemplate')),
            ],
            options={
                'verbose_name': 'Domain action',
                'verbose_name_plural': 'Domain actions',
            },
            bases=(models.Model, lj_common_shared_service.utils.mixins.LJProxyModelMixin),
        ),
        migrations.AddField(
            model_name='ljdomain',
            name='base_ontology',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='base_ontology', to='core.ljontology'),
        ),
        migrations.AddField(
            model_name='ljdomain',
            name='ontology',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ontology_domain', to='core.ljontology'),
        ),
        migrations.AddField(
            model_name='ljdomain',
            name='user',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_domain', to=settings.AUTH_USER_MODEL, verbose_name='Domain owner'),
        ),
        migrations.AddField(
            model_name='ljapplication',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='categories_application', to='core.LJCategory', verbose_name='Categories'),
        ),
        migrations.AddField(
            model_name='ljapplication',
            name='domain_action',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='domain_action_application', to='core.ljdomainaction'),
        ),
        migrations.AddField(
            model_name='ljapplication',
            name='goals',
            field=models.ManyToManyField(blank=True, related_name='goals_application', to='core.LJGoal', verbose_name='Goals'),
        ),
        migrations.AddField(
            model_name='ljapplication',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_application', to=settings.AUTH_USER_MODEL, verbose_name='Application owner'),
        ),
        migrations.CreateModel(
            name='LJCategoricalVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Categorical variable name')),
            ],
            options={
                'verbose_name': 'Categorical variable',
                'verbose_name_plural': 'Categorical variable',
            },
        ),
        migrations.CreateModel(
            name='LJCategoricalValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Attribute value')),
                ('index', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100000), django.core.validators.MinValueValidator(0)], verbose_name='Attribute index')),
                ('categorical_variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categorical_variable_value', to='core.ljcategoricalvariable', verbose_name='Variable name')),
            ],
            options={
                'verbose_name': 'Categorical value',
                'verbose_name_plural': 'Categorical values',
            },
        ),
        migrations.RunSQL(
            sql="SELECT setval(pg_get_serial_sequence('core_ljcategoricalvalue', 'id'), (SELECT MAX(id) FROM core_ljcategoricalvalue) + 1);",
        ),
        migrations.AddField(
            model_name='ljphotoreportimage',
            name='is_image',
            field=models.BooleanField(default=False, verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='ljphotoreportimage',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name=DATE_CREATED),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='ljphotoreportimage',
            name='date_modified',
            field=models.DateTimeField(auto_now=True, verbose_name=DATE_MODIFIED),
        ),
        migrations.RemoveField(
            model_name='ljapplicationtag',
            name='application',
        ),
        migrations.RemoveField(
            model_name='ljdomain',
            name='base_ontology',
        ),
        migrations.RemoveField(
            model_name='ljdomain',
            name='ontology',
        ),
        migrations.RemoveField(
            model_name='ljdomain',
            name='user',
        ),
        migrations.RemoveField(
            model_name='ljdomainaction',
            name='domain',
        ),
        migrations.RemoveField(
            model_name='ljdomainaction',
            name='template',
        ),
        migrations.RemoveField(
            model_name='ljphotoreportdetectionmodel',
            name='report',
        ),
        migrations.RemoveField(
            model_name='ljphotoreportimage',
            name='photo_report',
        ),
        migrations.RemoveField(
            model_name='ljphotoreportimageobject',
            name='bbox',
        ),
        migrations.RemoveField(
            model_name='ljphotoreportimageobject',
            name='image',
        ),
        migrations.RemoveField(
            model_name='ljtemplate',
            name='user',
        ),
        migrations.RemoveField(
            model_name='ljvideoframe',
            name='report',
        ),
        migrations.RemoveField(
            model_name='ljvideoreport',
            name='application',
        ),
        migrations.RemoveField(
            model_name='ljvideoreport',
            name='user',
        ),
        migrations.RemoveField(
            model_name='ljphotoreport',
            name='application',
        ),
        migrations.DeleteModel(
            name='LJApplication',
        ),
        migrations.DeleteModel(
            name='LJApplicationTag',
        ),
        migrations.DeleteModel(
            name='LJDomain',
        ),
        migrations.DeleteModel(
            name='LJDomainAction',
        ),
        migrations.DeleteModel(
            name='LJGoal',
        ),
        migrations.DeleteModel(
            name='LJOntology',
        ),
        migrations.DeleteModel(
            name='LJPhotoReportDetectionModel',
        ),
        migrations.DeleteModel(
            name='LJPhotoReportImage',
        ),
        migrations.DeleteModel(
            name='LJPhotoReportImageObject',
        ),
        migrations.DeleteModel(
            name='LJPhotoReportImageObjectBbox',
        ),
        migrations.DeleteModel(
            name='LJTemplate',
        ),
        migrations.DeleteModel(
            name='LJVideoFrame',
        ),
        migrations.DeleteModel(
            name='LJVideoReport',
        ),
        migrations.DeleteModel(
            name='LJPhoto',
        ),
        migrations.AlterField(
            model_name='ljphotoreport',
            name='output',
            field=models.JSONField(blank=True, default=None, null=True, verbose_name=REPORT_OUTPUT),
        ),
        migrations.AlterField(
            model_name='ljcategoricalvalue',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='ljcategoricalvariable',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='ljcategory',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='ljphotoreport',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='ljuserdevice',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
    ]
