# Generated by Django 2.1.3 on 2020-11-25 10:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import lj_common_shared_service.utils.file
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LJUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(default=None, max_length=255, null=True, verbose_name='username')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Full name')),
                ('company', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Company')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_pending_deletion', models.BooleanField(default=False, help_text='Designates whether the user has requested full account deletion', verbose_name='pending deletion')),
                ('job_title', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Job title')),
                ('referral', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='How did you hear about us?')),
                ('is_organization_admin', models.BooleanField(default=False, verbose_name='Organization admin')),
                ('is_organization_editor', models.BooleanField(default=False, verbose_name='Organization editor')),
                ('pin_code', models.PositiveIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(9999)], verbose_name='Pin code')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'Users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
        ),
        migrations.CreateModel(
            name='LJOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Name')),
                ('jots_limit_number', models.PositiveIntegerField(default=0, verbose_name='Number of jots allowed')),
                ('apps_limit_number', models.PositiveIntegerField(default=0, verbose_name='Number of applications allowed')),
                ('play_apps_limit_number', models.PositiveIntegerField(default=0, verbose_name='Number of play of apps allowed')),
                ('invitation_code', models.CharField(blank=True, db_index=True, max_length=1024, null=True, unique=True, verbose_name='Invitation code')),
                ('status', models.CharField(choices=[('0', 'Hold'), ('1', 'Active')], default='0', max_length=255, verbose_name='Status')),
                ('photo', models.ImageField(default=None, null=True, upload_to=lj_common_shared_service.utils.file.LJRandomFileName(''), verbose_name='Logo')),
                ('is_validate_email', models.BooleanField(default=False, help_text='Check if the mail is not in the blacklist - https://knowledge.hubspot.com/forms/what-domains-are-blocked-when-using-the-forms-email-domains-to-block-feature', verbose_name='Validate mails')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Unique UUID hash')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='ljuser',
            name='organization',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organization_user', to='authentication.LJOrganization'),
        ),
        migrations.AddField(
            model_name='ljuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
